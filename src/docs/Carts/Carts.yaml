paths:
  /api/carts/:
    post:
      summary: Crea un carrito
      tags:
        - Carts
      responses:
        "200":
          description: El carrito fue creado exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Cart"
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD.
  /api/carts/{cid}/:
    get:
      summary: Obtiene un carrito a partir del id
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a solicitar
        schema:
          $type: String
      responses:
        "200":
          description: El carrito fue obtenido satisfactoriamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Cart"
        "400":
          description: El ID no tiene el formato de id de Mongo.
        "404":
          description: Carrito no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD.
    put:
      summary: Modifica los productos del carrito
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a modificar
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateCart'
      responses:
        "200":
          description: Carrito actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Cart'
        "400":
          description: El params o el body no tienen el formato adecuado.
        "404":
          description: Carrito no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
    delete:
      summary: Borra todos los productos de un carrito a partir del id
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a limpiar
        schema:
          $type: String
      responses:
        "200":
          description: Carrito limpiado con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Cart'
        "400":
          description: El ID no tiene el formato de id de Mongo.
        "404":
          description: Producto no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
  /api/carts/{cid}/product/{pid}/:
    post:
      summary: Agrega un producto al carrito
      description: Este endpoint requiere token JWT para autorización y roles de usuario o premium. En caso de ser premium, el usuario no debe ser dueño del producto.
      security:
        - bearerAuth: []
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a modificar
        schema:
          $type: String
      - name: pid
        in: path
        required: true
        description: ID del producto a agregar
        schema:
          $type: String
      responses:
        "200":
          description: Producto agregado con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Cart'
        "400":
          description: Alguno de los ID no tiene el formato de id de Mongo.
        "404":
          description: Producto o carrito no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
    put:
      summary: Modifica la cantidad de unidades de un producto del carrito
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a modificar
        schema:
          $type: String
      - name: pid
        in: path
        required: true
        description: ID del producto al que se le modifica la cantidad
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateQuantity'
      responses:
        "200":
          description: Carrito actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Cart'
        "400":
          description: Alguno de los ID no tiene el formato de id de Mongo o el body no tiene el formato correcto.
        "404":
          description: Producto o carrito no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
    delete:
      summary: Elimina un producto del carrito
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a modificar
        schema:
          $type: String
      - name: pid
        in: path
        required: true
        description: ID del producto a borrar
        schema:
          $type: String
      responses:
        "200":
          description: Producto eliminado con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Cart'
        "400":
          description: Alguno de los ID no tiene el formato de id de Mongo.
        "404":
          description: Producto o carrito no encontrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
  /api/carts/{cid}/purchase/:
    post:
      summary: Genera la orden de compra
      description: Este endpoint requiere token JWT para autorización y roles de usuario o premium.
      security:
        - bearerAuth: []
      tags:
        - Carts
      parameters:
      - name: cid
        in: path
        required: true
        description: ID del carrito a comprar
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/purchase'
      responses:
        "200":
          description: Orden generada con éxito
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Order'
        "400":
          description: Alguno de los ID no tiene el formato de id de Mongo, o el email no es válido.
        "404":
          description: Carrito no encontrado o falta de stock en todos los productos.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexión con la BD
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  schemas:
    Cart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID autogenerado de mongo
        products:
          $ref: '#/components/schemas/CartProducts'
      example:
        _id: ObjectId("654024a6d24c0072b01fb159")
        products: [{
                "product": {
                    "_id": "64f650a1fe5c0b9e6ec4c426",
                    "title": "Product 2",
                    "description": "Description for Product 2",
                    "code": "P002",
                    "price": 29.99,
                    "stock": 0,
                    "category": "Clothing",
                    "thumbnail": [
                        "product2_1.jpg",
                        "product2_2.jpg"
                    ],
                    "status": true,
                },
                "quantity": 2
            },
            {
                "product": {
                    "_id": "64f650b5fe5c0b9e6ec4c428",
                    "title": "Product 3",
                    "description": "Description for Product 3",
                    "code": "P003",
                    "price": 9.99,
                    "stock": 87,
                    "category": "Home & Kitchen",
                    "thumbnail": [
                        "product3_1.jpg",
                        "product3_2.jpg"
                    ],
                    "status": true,
                },
                "quantity": 11
            }]
    CartProducts:
      type: array
      items:
        type: object
        properties:
          product:
            type: ObjectId
            description: ID autogenerado de mongo
          quantity:
            type: integer
            description: Unidades del producto en el carrito
    Order:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/Ticket'
        cart:
          $ref: '#/components/schemas/Cart'
      example:
        ticket: {
            code: 'ORDER17013722750762162',
            amount: 54.959999999999994,
            purchaser: 'analia.a.acosta@gmail.com',
            products: [{
                "product": {
                    "_id": "64f650b5fe5c0b9e6ec4c428",
                    "title": "Product 3",
                    "description": "Description for Product 3",
                    "code": "P003",
                    "price": 9.99,
                    "stock": 87,
                    "category": "Home & Kitchen",
                    "thumbnail": [
                        "product3_1.jpg",
                        "product3_2.jpg"
                    ],
                    "status": true,
                },
                "quantity": 11
            }],
            status: 'Pending',
            _id: new ObjectId("6568e173b6116d550105e0bc"),
            purchase_datetime: 2023-11-30T19:24:35.078Z,
          }
        cart: {
          _id: new ObjectId("654024a6d24c0072b01fb159"),
          products: [{
                "product": {
                    "_id": "64f650a1fe5c0b9e6ec4c426",
                    "title": "Product 2",
                    "description": "Description for Product 2",
                    "code": "P002",
                    "price": 29.99,
                    "stock": 0,
                    "category": "Clothing",
                    "thumbnail": [
                        "product2_1.jpg",
                        "product2_2.jpg"
                    ],
                    "status": true,
                },
                "quantity": 2
            }]
          }
    Ticket:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID autogenerado de mongo
        code:
          type: string
          description: Código de la orden
        purchase_datetime:
          type: string
          description: Fecha de realización de la orden
        amount:
          type: number
          description: Monto de la orden
        purchaser:
          type: string
          description: email del comprador
        products:
          $ref: '#/components/schemas/CartProducts'
        status:
          type: string
          description: Estado de completitud de la orden
      example:
        code: 'ORDER17013722750762162'
        amount: 54.959999999999994
        purchaser: 'analia.a.acosta@gmail.com'
        products: [
          { product: new ObjectId("64f650b5fe5c0b9e6ec4c428"), quantity: 3 },
          { product: new ObjectId("64f6508cfe5c0b9e6ec4c424"), quantity: 1 }
        ]
        status: 'Pending'
        _id: new ObjectId("6568e173b6116d550105e0bc")
        purchase_datetime: 2023-11-30T19:24:35.078Z
  requestBodies:
    updateCart:
      type: object
      properties:
        products:
          $ref: '#/components/schemas/CartProducts'
      example:
        products: [
            {
                "product": "64f650b5fe5c0b9e6ec4c428",
                "quantity": 2
            },
            {
                "product": "64f6508cfe5c0b9e6ec4c424",
                "quantity": 1
            }
        ]
    updateQuantity:
      type: object
      properties:
        quantity:
          type: integer
          description: Unidades del producto en el carrito
      example:
        quantity: 1
    purchase:
      type: object
      properties:
        shippingPrice:
          type: number
        email:
          type: string
      example:
        email: 'analia.a.acosta@gmail.com'
        shippingPrice: 5

